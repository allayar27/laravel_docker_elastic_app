# docker-compose.yml
services:
    app:
        build:
            context: .
            target: php
            dockerfile: docker/php/Dockerfile
            args:
                - APP_ENV=${APP_ENV}
        environment:
            - APP_ENV=${APP_ENV}
            - CONTAINER_ROLE=app
        container_name: app
        restart: unless-stopped
        tty: true
        working_dir: /var/www/html
        volumes:
            - ./:/var/www/html:delegated
            # - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
            - ./docker/php/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
        expose:
            - 9000
        networks:
            - laravel
        depends_on:
            - mysql
            - elasticsearch
            - redis

    nginx:
         image: nginx:alpine
         container_name: nginx
         restart: unless-stopped
         tty: true
         ports:
             - "7000:80"
            #  - "443:443"
         volumes:
             - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
             - ./:/var/www/html:delegated
         networks:
             - laravel
         depends_on:
             - app

    mysql:
        image: mysql:8.0
        container_name: mysql
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: "${DB_DATABASE}"
            MYSQL_USER: "${DB_USERNAME}"
            MYSQL_PASSWORD: "${DB_PASSWORD}"
            MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
        ports:
            - "3306:3306"
        volumes:
            - mysql-data:/var/lib/mysql
        networks:
            - laravel

    redis:
        image: redis:alpine
        container_name: redis
        command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
        ports:
            - 6379:6379
        # volumes:
        #     - redis-data:/data

    phpmyadmin:
        image: phpmyadmin/phpmyadmin:latest
        container_name: phpmyadmin
        restart: unless-stopped
        environment:
            PMA_HOST: mysql
            MYSQL_ROOT_PASSWORD: rootpassword
        ports:
            - "8081:80"
        networks:
            - laravel

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
        container_name: elasticsearch
        restart: unless-stopped
        environment:
            # - http.host=0.0.0.0
            # - transport.host=127.0.0.1
            - node.name=es01
            - cluster.name=es-docker-cluster
            - bootstrap.memory_lock=true
            - discovery.type=single-node
            - xpack.security.enabled=false
            - xpack.security.enrollment.enabled=false
            - xpack.security.autoconfiguration.enabled=true
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - es-data:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
            - "9300:9300"
        networks:
            - laravel

    logstash:
        image: docker.elastic.co/logstash/logstash:8.15.0
        container_name: logstash
        restart: unless-stopped
        volumes:
            - ./elasticsearch/logstash/:/logstash_dir
        command: logstash -f /logstash_dir/logstash.conf
        depends_on:
            - elasticsearch
        ports:
            - '9600:9600'
        environment:
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
        networks:
            - laravel

    kibana:
        image: docker.elastic.co/kibana/kibana:8.15.0
        container_name: kibana
        ports:
            - "5601:5601"
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            # - ELASTICSEARCH_USERNAME=${KIBANA_USERNAME}
            # - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
        # volumes:
        #     - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
        depends_on:
            - elasticsearch
        restart: unless-stopped
        networks:
            - laravel


volumes:
    mysql-data:
        # driver: local
    es-data:
        driver: local

networks:
    laravel:
        driver: bridge
